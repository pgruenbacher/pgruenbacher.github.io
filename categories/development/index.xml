<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Modicum</title>
    <link>http://pgruenbacher.github.io/categories/development/</link>
    <description>Recent content in Development on Modicum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Jun 2015 21:22:12 -0400</lastBuildDate>
    <atom:link href="http://pgruenbacher.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Oh My Zsh</title>
      <link>http://pgruenbacher.github.io/content/blog/zshell/</link>
      <pubDate>Mon, 08 Jun 2015 21:22:12 -0400</pubDate>
      
      <guid>http://pgruenbacher.github.io/content/blog/zshell/</guid>
      <description>

&lt;h1 id=&#34;intro:ca21ab28e20662996faa7cf15985f95c&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Best intro is through the &lt;a href=&#34;http://zsh.sourceforge.net/Intro/intro_1.html&#34;&gt;sourcefourge&lt;/a&gt; intro.&lt;/p&gt;

&lt;h1 id=&#34;cycling:ca21ab28e20662996faa7cf15985f95c&#34;&gt;Cycling&lt;/h1&gt;

&lt;p&gt;Can cycle through available files, filter by directory
&lt;image src=&#34;http://pgruenbacher.github.io/images/example1.gif&#34;/&gt;&lt;/p&gt;

&lt;h1 id=&#34;case-insensitive-autocompletion:ca21ab28e20662996faa7cf15985f95c&#34;&gt;Case-insensitive autocompletion&lt;/h1&gt;

&lt;p&gt;Tell me now if bash has this option, because I love this feature.&lt;/p&gt;

&lt;p&gt;&lt;image src=&#34;http://pgruenbacher.github.io/images/exampleCaseInsensitive.gif&#34;/&gt;&lt;/p&gt;

&lt;h1 id=&#34;command-context-autocompletion:ca21ab28e20662996faa7cf15985f95c&#34;&gt;Command context autocompletion&lt;/h1&gt;

&lt;p&gt;It provides a lot of the same functionality features as bro pages.&lt;/p&gt;

&lt;p&gt;common builtin functions like tar have docs builtin to zsh.&lt;/p&gt;

&lt;p&gt;&lt;image src=&#34;http://pgruenbacher.github.io/images/example2.gif&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Especially useful is the git autocompletion and help&lt;/p&gt;

&lt;p&gt;&lt;image src=&#34;http://pgruenbacher.github.io/images/example3.gif&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The golang plugin.
This is based on plugins I had installed to my zshrc.&lt;/p&gt;

&lt;p&gt;&lt;image src=&#34;http://pgruenbacher.github.io/images/example5.gif&#34;/&gt;&lt;/p&gt;

&lt;h1 id=&#34;path-expansion:ca21ab28e20662996faa7cf15985f95c&#34;&gt;Path Expansion&lt;/h1&gt;

&lt;p&gt;Will expand if the path pattern exists. Othewise will expand up until where the pattern no longer matches&lt;/p&gt;

&lt;p&gt;&lt;image src=&#34;http://pgruenbacher.github.io/images/example4.gif&#34;/&gt;&lt;/p&gt;

&lt;h1 id=&#34;syntax-highlighting:ca21ab28e20662996faa7cf15985f95c&#34;&gt;Syntax Highlighting&lt;/h1&gt;

&lt;p&gt;I turned off a lot of the highlighting so that it&amp;rsquo;s less colorful and crowded, but the highlighting of text, brackets, etc. is very helpful. Unrecognized tokens/commands turn red for error detection.&lt;/p&gt;

&lt;p&gt;&lt;image src=&#34;http://pgruenbacher.github.io/images/exampleSyntax1.gif&#34;/&gt;&lt;/p&gt;

&lt;h1 id=&#34;greater-prompt-customization:ca21ab28e20662996faa7cf15985f95c&#34;&gt;Greater Prompt Customization&lt;/h1&gt;

&lt;p&gt;Allows for right-justified prompts, useful for more subtle information that can be tucked away to the right side for quick reference.
Here is my custom theme that I&amp;rsquo;ve adopted: &lt;a href=&#34;https://github.com/pgruenbacher/zshrc_custom/blob/master/themes/my_custom.zsh-theme&#34;&gt;my_custom.zsh-theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this theme I intend to expand to two lines of information with information such as X11 forwarding status, full path, and local time. Currently it will display the current git repository and will also display user@host during ssh sessions. Will also turn red if a command did not work.
&lt;image src=&#34;http://pgruenbacher.github.io/images/exampleSSH.gif&#34;/&gt;&lt;/p&gt;

&lt;h1 id=&#34;oh-my-glob:ca21ab28e20662996faa7cf15985f95c&#34;&gt;Oh My Glob&lt;/h1&gt;

&lt;p&gt;Recursive search of subdirectories&lt;/p&gt;

&lt;p&gt;&lt;image src=&#34;http://pgruenbacher.github.io/images/exampleRecursive.gif&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The following table by &lt;a href=&#34;http://frendrich.se&#34;&gt;http://frendrich.se&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;pre class=&#34;zsh&#34;&gt;
    ls &lt;em&gt;(.)            # list just regular files
    ls *(/)            # list just directories
    ls -ld *(/om[1,3]) # Show three newest directories. &amp;ldquo;om&amp;rdquo; orders by modification. &amp;ldquo;[1,3]&amp;rdquo; works like Python slice.
    rm -i *(.L0)       # Remove zero length files, prompt for each file
    ls *(^m0)          # Files not modified today.
    emacs **/main.py   # Edit main.py, wherever it is in this directory tree. ** is great.
    ls **/&lt;/em&gt;(.x)        # List all executable files in this tree
    ls &lt;em&gt;~&lt;/em&gt;.*(.)        # List all files that does not have a dot in the filename
    ls -l */**(Lk+100) # List all files larger than 100kb in this tree
    ls DATA_&lt;a href=&#34;#c4,7&#34;&gt;0-9&lt;/a&gt;.csv # List DATA_nnnn.csv to DATA_nnnnnnn.csv
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;global-alias:ca21ab28e20662996faa7cf15985f95c&#34;&gt;Global Alias&lt;/h1&gt;

&lt;p&gt;You can have a global alias be used anywhere in the command line in succession to other commands.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;pre class=&#34;zsh&#34;&gt;
    alias -g remote=pgbacher@183.134.3.51
    ssh remote
    alias -g friends=&amp;lsquo;| fgrep -f ~/.friends&amp;rsquo;
    w friends
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;oh-my-zsh:ca21ab28e20662996faa7cf15985f95c&#34;&gt;Oh My Zsh&lt;/h1&gt;

&lt;p&gt;There is great support from the community.&lt;/p&gt;

&lt;p&gt;here is my custom themes and plugins that are managed by oh-my-zsh:
&lt;a href=&#34;https://github.com/pgruenbacher/zshrc_custom&#34;&gt;pgruenbacher/zshrc_custom&lt;/a&gt;&lt;/p&gt;

&lt;!-- &lt;video 
    id=&#34;really-cool-video&#34; 
    class=&#34;video-js vjs-default-skin vjs-big-play-centered&#34; 
    controls
    autoplay
    loop
     preload=&#34;auto&#34; 
     width=&#34;640&#34; height=&#34;264&#34; 
     poster=&#34;{{ .Site.BaseURL }}images/2013Nascar-RotGallery_0.jpg&#34;
     data-setup=&#39;{}&#39;&gt;
      &lt;source src=&#34;{{ .Site.BaseURL }}vids/example2.mp4&#34; type=&#39;video/mp4&#39;&gt;
      &lt;p class=&#34;vjs-no-js&#34;&gt;
        To view this video please enable JavaScript, and consider upgrading to a web browser
        that 
        &lt;a href=&#34;http://videojs.com/html5-video-support/&#34; target=&#34;_blank&#34;&gt;supports HTML5 video&lt;/a&gt;
      &lt;/p&gt;
  &lt;/video&gt; --&gt;
</description>
    </item>
    
    <item>
      <title>vim_tips</title>
      <link>http://pgruenbacher.github.io/blog/vim_tips/</link>
      <pubDate>Wed, 13 May 2015 10:01:28 -0400</pubDate>
      
      <guid>http://pgruenbacher.github.io/blog/vim_tips/</guid>
      <description>&lt;p&gt;Find a space pattern and insert a newline,
useful for path variable expansion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/\_s
:s//\r&amp;amp;/g
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>sed_references</title>
      <link>http://pgruenbacher.github.io/blog/sed_references/</link>
      <pubDate>Tue, 12 May 2015 10:06:44 -0400</pubDate>
      
      <guid>http://pgruenbacher.github.io/blog/sed_references/</guid>
      <description>&lt;p&gt;Sed stream editing command and awk command deserves their own reference post.
This is mainly a reference to the &lt;a href=&#34;http://www.grymoire.com/Unix/Sed.html#uh-0&#34;&gt;grymoire&lt;/a&gt; article.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sed &#39;s/\/usr\/local\/bin/\/common\/bin/&#39; &amp;lt;old &amp;gt;new #Ugly
sed &#39;s_/usr/local/bin_/common/bin_&#39; &amp;lt;old &amp;gt;new #Pretty underscore delimiters
sed &#39;s:/usr/local/bin:/common/bin:&#39; &amp;lt;old &amp;gt;new #Pretty colon delimiters
sed &#39;s/[a-zA-Z]* /REPLACED /2&#39; &amp;lt;old &amp;gt;new # only the second pattern occurrence
sed &#39;s/[a-zA-Z]* /REPLACED /2g&#39; &amp;lt;old &amp;gt;new # replace all starting at second pattern
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>linux_tips</title>
      <link>http://pgruenbacher.github.io/blog/linux_tips/</link>
      <pubDate>Mon, 11 May 2015 20:53:46 -0400</pubDate>
      
      <guid>http://pgruenbacher.github.io/blog/linux_tips/</guid>
      <description>

&lt;p&gt;For learning how to make bash shell scripts for linux. Recommend going through this &lt;a href=&#34;http://www.freeos.com/guides/lsst/&#34;&gt;tutorial&lt;/a&gt; list first&lt;/p&gt;

&lt;h3 id=&#34;filters:9b6aab0ac9684b90711607abb7cd4f30&#34;&gt;Filters&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tail +20 &amp;lt; hotel.txt | head -n30 &amp;gt;hlist&lt;/strong&gt; takes lines 20 and is filtered  by head to 30 from hotel.txt and ouputs to hlist file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sort &amp;lt; sname | uniq &amp;gt; u_sname&lt;/strong&gt; sorts the lines of sname file, and is filtered by uniq command.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;search-and-replace:9b6aab0ac9684b90711607abb7cd4f30&#34;&gt;Search and Replace&lt;/h3&gt;

&lt;h3 id=&#34;relational-operators:9b6aab0ac9684b90711607abb7cd4f30&#34;&gt;Relational Operators&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;10 -eq 10&lt;/strong&gt;: a is &lt;strong&gt;equal&lt;/strong&gt; to b&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;10 -ne 20&lt;/strong&gt;: a is &lt;strong&gt;not equal&lt;/strong&gt; to b&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;10 -gt 20&lt;/strong&gt;: a is not &lt;strong&gt;greater&lt;/strong&gt; than b&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;10 -lt 20&lt;/strong&gt;: a is &lt;strong&gt;less&lt;/strong&gt; than b&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;10 -ge 20&lt;/strong&gt;: a is not &lt;strong&gt;greater or equal&lt;/strong&gt; to b&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;10 -le 20&lt;/strong&gt;: a is &lt;strong&gt;less or equal&lt;/strong&gt; to b&lt;/li&gt;
&lt;li&gt;[ -e filepath ] Returns true if file exists.&lt;/li&gt;
&lt;li&gt;[ -x filepath ] Returns true if file exists and executable.&lt;/li&gt;
&lt;li&gt;[ -S filepath ] Returns true if file exists and its a socket file.&lt;/li&gt;
&lt;li&gt;[ expr1 -a expr2 ] Returns true if both the expression is true.&lt;/li&gt;
&lt;li&gt;[ expr1 -o expr2 ] Returns true if either of the expression1 or 2 is true.&lt;/li&gt;
&lt;li&gt;[ -z filepath] Returns true if path is null&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;for-loops:9b6aab0ac9684b90711607abb7cd4f30&#34;&gt;For Loops&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;for ((  i = 0 ;  i &amp;lt;= 5;  i++  ))

for (( expr1; expr2; expr3 ))
do
   ### each expression will be evaluated ###  
Done

for (( i = 1; i &amp;lt;= 5; i++ ))      ### Outer for loop ###
do
    for (( j = 1 ; j &amp;lt;= 5; j++ )) ### Inner for loop ###
    do
          echo -n &amp;quot;$i &amp;quot;
    done
  echo &amp;quot;&amp;quot; #### print the new line ###
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;brace-expansion:9b6aab0ac9684b90711607abb7cd4f30&#34;&gt;Brace Expansion&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{a,b}$PATH  # is a$PATH b$PATH
_{I,want,my,money,back} # is _I _want _my _money _back

$ echo {5..12} # brace expansion
5 6 7 8 9 10 11 12
$ echo {5..k} # cannot mix types
{5..k}
$ echo {01..10} # zeropad, range is zeropadded as well
01 02 03 04 05 06 07 08 09 10
$ echo {{A..C},{a..c}} #also follows alphater 
A B C a b c
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;redirection:9b6aab0ac9684b90711607abb7cd4f30&#34;&gt;Redirection&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Standard File&lt;/th&gt;
&lt;th&gt;Descriptor Number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;stdin&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;stdout&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;stderr&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code&gt;$ rm bad_file_name111 &amp;gt; err.txt #prints the error on screen
$ rm bad_file_name111 2&amp;gt;err.txt #redirects stderr output to the err.txt

#edit ./demoscr
echo &amp;quot;Error&amp;quot; 1&amp;gt;&amp;amp;2 #prints message as stderr
cd nonexistent 2&amp;gt;&amp;amp;1 #redirects stderr of command to stdout
1&amp;gt;filename # Redirect stdout to file &amp;quot;filename.&amp;quot;
1&amp;gt;&amp;gt;filename # Redirect and append stdout to file &amp;quot;filename.&amp;quot;
2&amp;gt;filename # Redirect stderr to file &amp;quot;filename.&amp;quot;
2&amp;gt;&amp;gt;filename # Redirect and append stderr to file &amp;quot;filename.&amp;quot;
&amp;amp;&amp;gt;filename # Redirect both stdout and stderr to file &amp;quot;filename.&amp;quot;

$ ./demoscr &amp;gt; er1   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;references:9b6aab0ac9684b90711607abb7cd4f30&#34;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tldp.org/LDP/abs/html/io-redirection.html&#34;&gt;tlp&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>